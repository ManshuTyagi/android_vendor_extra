From f11a2f173af6a35db548505ed1511b1c31a2ce1f Mon Sep 17 00:00:00 2001
From: ender1324 <ender1324@abv.bg>
Date: Wed, 3 Feb 2021 15:38:19 +0200
Subject: [PATCH 33/34] base: Add long screenshot chip

- Mimicks delete chip to add a new chip that triggers stitchimage intent for long screenshot
- May not work on dirty flash (worked with dirty flash for me but not with other people)
- Also a bit janky right now but it works until someone does it properly :)
- Big thanks to jhenrique for the initial implementation on Q

Co-authored-by: jhenrique09 <jhenrique09.mcz@hotmail.com>
Change-Id: Ieb7dadf67e1f3e871f3120e8b236ad01903b76d3
Signed-off-by: SamarV-121 <samarvispute121@gmail.com>
---
 packages/SystemUI/AndroidManifest.xml         |  4 ++
 .../res/drawable/ic_screenshot_scrollss.xml   |  7 ++
 packages/SystemUI/res/values/cm_strings.xml   |  3 +
 .../DefaultBroadcastReceiverBinder.java       | 10 +++
 .../systemui/screenshot/GlobalScreenshot.java | 16 +++++
 .../screenshot/SaveImageInBackgroundTask.java | 23 +++++++
 .../systemui/screenshot/ScreenshotEvent.java  |  2 +
 .../screenshot/ScrollScreenshotReceiver.java  | 68 +++++++++++++++++++
 8 files changed, 133 insertions(+)
 create mode 100644 packages/SystemUI/res/drawable/ic_screenshot_scrollss.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenshot/ScrollScreenshotReceiver.java

diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index d77e46c0..f1f92eb3 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -412,6 +412,10 @@
         <receiver android:name=".screenshot.DeleteScreenshotReceiver"
             android:exported="false" />
 
+        <!-- Callback for scrolling screenshot notification -->
+        <receiver android:name=".screenshot.ScrollScreenshotReceiver"
+            android:exported="false" />
+
         <!-- Callback for invoking a smart action from the screenshot notification. -->
         <receiver android:name=".screenshot.SmartActionsReceiver"
                   android:exported="false"/>
diff --git a/packages/SystemUI/res/drawable/ic_screenshot_scrollss.xml b/packages/SystemUI/res/drawable/ic_screenshot_scrollss.xml
new file mode 100644
index 00000000..57b8172d
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_screenshot_scrollss.xml
@@ -0,0 +1,7 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path android:fillColor="#FFF" android:pathData="M7,1A2,2 0 0,0 5,3V21A2,2 0 0,0 7,23H17A2,2 0 0,0 19,21V3A2,2 0 0,0 17,1H7M7,4H17V20H7V4M9,6V10H10.5V7.5H13V6H9M13.5,14V16.5H11V18H15V14H13.5Z" />
+</vector>
diff --git a/packages/SystemUI/res/values/cm_strings.xml b/packages/SystemUI/res/values/cm_strings.xml
index 9b395623..696ee564 100644
--- a/packages/SystemUI/res/values/cm_strings.xml
+++ b/packages/SystemUI/res/values/cm_strings.xml
@@ -118,4 +118,7 @@
 
      <!-- Biometric Dialog - Use Face -->
     <string name="biometric_dialog_button_use_face">Use Face</string>
+
+    <!-- Scrolling Screenshot string -->
+    <string name="scrollss">Scroll</string>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/dagger/DefaultBroadcastReceiverBinder.java b/packages/SystemUI/src/com/android/systemui/dagger/DefaultBroadcastReceiverBinder.java
index 25d02a66..5f6ce463 100644
--- a/packages/SystemUI/src/com/android/systemui/dagger/DefaultBroadcastReceiverBinder.java
+++ b/packages/SystemUI/src/com/android/systemui/dagger/DefaultBroadcastReceiverBinder.java
@@ -21,6 +21,7 @@ import android.content.BroadcastReceiver;
 import com.android.systemui.media.dialog.MediaOutputDialogReceiver;
 import com.android.systemui.screenshot.ActionProxyReceiver;
 import com.android.systemui.screenshot.DeleteScreenshotReceiver;
+import com.android.systemui.screenshot.ScrollScreenshotReceiver;
 import com.android.systemui.screenshot.SmartActionsReceiver;
 
 import dagger.Binds;
@@ -51,6 +52,15 @@ public abstract class DefaultBroadcastReceiverBinder {
     public abstract BroadcastReceiver bindDeleteScreenshotReceiver(
             DeleteScreenshotReceiver broadcastReceiver);
 
+    /**
+     *
+     */
+    @Binds
+    @IntoMap
+    @ClassKey(ScrollScreenshotReceiver.class)
+    public abstract BroadcastReceiver bindScrollScreenshotReceiver(
+            ScrollScreenshotReceiver broadcastReceiver);
+
     /**
      *
      */
diff --git a/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java b/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
index 8501547a..1a533c42 100644
--- a/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
+++ b/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
@@ -136,6 +136,7 @@ public class GlobalScreenshot implements ViewTreeObserver.OnComputeInternalInset
         public Notification.Action shareAction;
         public Notification.Action editAction;
         public Notification.Action deleteAction;
+        public Notification.Action scrollAction;
         public List<Notification.Action> smartActions;
 
         /**
@@ -146,6 +147,7 @@ public class GlobalScreenshot implements ViewTreeObserver.OnComputeInternalInset
             shareAction = null;
             editAction = null;
             deleteAction = null;
+            scrollAction = null;
             smartActions = null;
         }
     }
@@ -161,6 +163,7 @@ public class GlobalScreenshot implements ViewTreeObserver.OnComputeInternalInset
     static final String ACTION_TYPE_DELETE = "Delete";
     static final String ACTION_TYPE_SHARE = "Share";
     static final String ACTION_TYPE_EDIT = "Edit";
+    static final String ACTION_TYPE_SCROLL = "Scroll";
     static final String EXTRA_SMART_ACTIONS_ENABLED = "android:smart_actions_enabled";
     static final String EXTRA_ACTION_INTENT = "android:screenshot_action_intent";
 
@@ -1076,6 +1079,19 @@ public class GlobalScreenshot implements ViewTreeObserver.OnComputeInternalInset
         mActionsView.addView(editChip);
         chips.add(editChip);
 
+        // Scrolling Screenshot
+        ScreenshotActionChip scrollChip = (ScreenshotActionChip) inflater.inflate(
+                R.layout.global_screenshot_action_chip, mActionsView, false);
+        scrollChip.setText(imageData.scrollAction.title);
+        scrollChip.setIcon(imageData.scrollAction.getIcon(), true);
+        scrollChip.setPendingIntent(imageData.scrollAction.actionIntent, () -> {
+            mUiEventLogger.log(ScreenshotEvent.SCREENSHOT_SCROLL_TAPPED);
+            dismissScreenshot("chip tapped", false);
+            mOnCompleteRunnable.run();
+        });
+        mActionsView.addView(scrollChip);
+        chips.add(scrollChip);
+
         mScreenshotPreview.setOnClickListener(v -> {
             try {
                 imageData.editAction.actionIntent.send();
diff --git a/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java b/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java
index 3a65e5cd..fea1bcc9 100644
--- a/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java
+++ b/packages/SystemUI/src/com/android/systemui/screenshot/SaveImageInBackgroundTask.java
@@ -224,6 +224,7 @@ class SaveImageInBackgroundTask extends AsyncTask<Void, Void, Void> {
             mImageData.shareAction = createShareAction(mContext, mContext.getResources(), uri);
             mImageData.editAction = createEditAction(mContext, mContext.getResources(), uri);
             mImageData.deleteAction = createDeleteAction(mContext, mContext.getResources(), uri);
+            mImageData.scrollAction = createScrollAction(mContext, mContext.getResources(), uri);
 
             mParams.mActionsReadyListener.onActionsReady(mImageData);
             mParams.finisher.accept(mImageData.uri);
@@ -381,6 +382,28 @@ class SaveImageInBackgroundTask extends AsyncTask<Void, Void, Void> {
         return deleteActionBuilder.build();
     }
 
+    Notification.Action createScrollAction(Context context, Resources r, Uri uri) {
+        // Make sure pending intents for the system user are still unique across users
+        // by setting the (otherwise unused) request code to the current user id.
+        int requestCode = mContext.getUserId();
+
+        // Create a scroll action for the notification
+        PendingIntent scrollAction = PendingIntent.getBroadcast(context, requestCode,
+                new Intent(context, ScrollScreenshotReceiver.class)
+                        .putExtra(GlobalScreenshot.SCREENSHOT_URI_ID, uri.toString())
+                        .putExtra(GlobalScreenshot.EXTRA_ID, mScreenshotId)
+                        .putExtra(GlobalScreenshot.EXTRA_SMART_ACTIONS_ENABLED,
+                                mSmartActionsEnabled)
+                        .addFlags(Intent.FLAG_RECEIVER_FOREGROUND),
+                PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
+        Notification.Action.Builder scrollActionBuilder = new Notification.Action.Builder(
+                Icon.createWithResource(r, R.drawable.ic_screenshot_scrollss),
+                r.getString(R.string.scrollss), scrollAction);
+
+        return scrollActionBuilder.build();
+    }
+
+
     private int getUserHandleOfForegroundApplication(Context context) {
         // This logic matches
         // com.android.systemui.statusbar.phone.PhoneStatusBarPolicy#updateManagedProfile
diff --git a/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotEvent.java b/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotEvent.java
index 8535d570..22751144 100644
--- a/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotEvent.java
+++ b/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotEvent.java
@@ -49,6 +49,8 @@ public enum ScreenshotEvent implements UiEventLogger.UiEventEnum {
     SCREENSHOT_EDIT_TAPPED(308),
     @UiEvent(doc = "screenshot share button tapped")
     SCREENSHOT_SHARE_TAPPED(309),
+    @UiEvent(doc = "screenshot long ss button tapped")
+    SCREENSHOT_SCROLLSS_TAPPED(420),
     @UiEvent(doc = "screenshot smart action chip tapped")
     SCREENSHOT_SMART_ACTION_TAPPED(374),
     @UiEvent(doc = "screenshot scroll tapped")
diff --git a/packages/SystemUI/src/com/android/systemui/screenshot/ScrollScreenshotReceiver.java b/packages/SystemUI/src/com/android/systemui/screenshot/ScrollScreenshotReceiver.java
new file mode 100644
index 00000000..3d5493b2
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenshot/ScrollScreenshotReceiver.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * Copyright (C) 2020-2021 ProjectFluid
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.screenshot;
+
+import static com.android.systemui.screenshot.GlobalScreenshot.ACTION_TYPE_SCROLL;
+import static com.android.systemui.screenshot.GlobalScreenshot.EXTRA_ID;
+import static com.android.systemui.screenshot.GlobalScreenshot.EXTRA_SMART_ACTIONS_ENABLED;
+import static com.android.systemui.screenshot.GlobalScreenshot.SCREENSHOT_URI_ID;
+
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ComponentName;
+import android.net.Uri;
+
+import com.android.systemui.dagger.qualifiers.Background;
+
+import java.util.concurrent.Executor;
+
+import javax.inject.Inject;
+
+public class ScrollScreenshotReceiver extends BroadcastReceiver {
+
+    private final ScreenshotSmartActions mScreenshotSmartActions;
+    private final Executor mBackgroundExecutor;
+
+    @Inject
+    public ScrollScreenshotReceiver(ScreenshotSmartActions screenshotSmartActions,
+            @Background Executor backgroundExecutor) {
+        mScreenshotSmartActions = screenshotSmartActions;
+        mBackgroundExecutor = backgroundExecutor;
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        if (!intent.hasExtra(SCREENSHOT_URI_ID)) {
+            return;
+        }
+
+        final Uri uri = Uri.parse(intent.getStringExtra(SCREENSHOT_URI_ID));
+        mBackgroundExecutor.execute(() -> {
+             Intent intentt = new Intent();
+             intentt.setComponent(new ComponentName("com.asus.stitchimage", "com.asus.stitchimage.OverlayService"));
+             intentt.putExtra("callfrom", "AsusSettings");
+             context.startService(intentt);
+        });
+        if (intent.getBooleanExtra(EXTRA_SMART_ACTIONS_ENABLED, false)) {
+            mScreenshotSmartActions.notifyScreenshotAction(
+                    context, intent.getStringExtra(EXTRA_ID), ACTION_TYPE_SCROLL, false);
+        }
+    }
+}
-- 
2.30.1

