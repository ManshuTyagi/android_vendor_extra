From a625fd3c9c2517fa7373bba0a5d75ec4aa38a9ee Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Tue, 3 Nov 2020 13:17:29 -0800
Subject: [PATCH 22/34] SystemUI: Restore typographic clock face

This reverts commits 583067c4e4799b0a633d8e861698c8fc2a5c7a6f and
37fe8022174fc809ef4622f7d6c69f9bdff06913.

This clock face still works fine and we can expose it in ThemePicker.

Changes made for forward-porting to Android 11:
  - Added SmallClockPosition to manage preferred Y position
  - Adjusted resources class imports for res-keyguard merge
  - Updated arguments to ColorExtractor#getColors

Change-Id: If75c593e3403962e1a7ffa6fae0734f785d79589
Signed-off-by: SamarV-121 <samarvispute121@gmail.com>
---
 .../drawable-xxxhdpi/type_thumbnail.png       | Bin 0 -> 6315 bytes
 .../res-keyguard/layout/type_aod_clock.xml    |  23 ++
 .../res-keyguard/layout/typographic_clock.xml |  26 +++
 .../SystemUI/res-keyguard/values/strings.xml  | 102 +++++++++
 .../android/keyguard/clock/ClockLayout.java   |   8 +
 .../android/keyguard/clock/ClockManager.java  |   1 +
 .../keyguard/clock/TypeClockController.java   | 211 ++++++++++++++++++
 .../keyguard/clock/TypographicClock.java      | 130 +++++++++++
 8 files changed, 501 insertions(+)
 create mode 100644 packages/SystemUI/res-keyguard/drawable-xxxhdpi/type_thumbnail.png
 create mode 100644 packages/SystemUI/res-keyguard/layout/type_aod_clock.xml
 create mode 100644 packages/SystemUI/res-keyguard/layout/typographic_clock.xml
 create mode 100644 packages/SystemUI/src/com/android/keyguard/clock/TypeClockController.java
 create mode 100644 packages/SystemUI/src/com/android/keyguard/clock/TypographicClock.java

diff --git a/packages/SystemUI/res-keyguard/drawable-xxxhdpi/type_thumbnail.png b/packages/SystemUI/res-keyguard/drawable-xxxhdpi/type_thumbnail.png
new file mode 100644
index 0000000000000000000000000000000000000000..2bfd655e37de87d2e664da2e3abe90574560f3e6
GIT binary patch
literal 6315
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res-keyguard/layout/type_aod_clock.xml b/packages/SystemUI/res-keyguard/layout/type_aod_clock.xml
new file mode 100644
index 00000000..28ff5a25
--- /dev/null
+++ b/packages/SystemUI/res-keyguard/layout/type_aod_clock.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (C) 2019 The Android Open Source Project
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+<com.android.keyguard.clock.ClockLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+  >
+  <include layout="@layout/typographic_clock" />
+</com.android.keyguard.clock.ClockLayout>
diff --git a/packages/SystemUI/res-keyguard/layout/typographic_clock.xml b/packages/SystemUI/res-keyguard/layout/typographic_clock.xml
new file mode 100644
index 00000000..73bb4b9a
--- /dev/null
+++ b/packages/SystemUI/res-keyguard/layout/typographic_clock.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (C) 2019 The Android Open Source Project
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+<com.android.keyguard.clock.TypographicClock
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/type_clock"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:paddingStart="50dp"
+    android:textAlignment="viewStart"
+    style="@style/widget_big"
+    android:textSize="40dp"
+    />
diff --git a/packages/SystemUI/res-keyguard/values/strings.xml b/packages/SystemUI/res-keyguard/values/strings.xml
index 4b662137..91df3905 100644
--- a/packages/SystemUI/res-keyguard/values/strings.xml
+++ b/packages/SystemUI/res-keyguard/values/strings.xml
@@ -318,11 +318,113 @@ number">%d</xliff:g> remaining attempt before SIM becomes permanently unusable.
 number">%d</xliff:g> remaining attempts before SIM becomes permanently unusable. Contact carrier for details.</item>
     </plurals>
 
+    <!-- Time displayed on typographic clock face, which displays the time in words.
+             Example:
+
+                 It's
+                 Four
+                 Twenty
+                 Nine
+
+         This string requires two arguments: the first in the hours of the time and
+         the second is the minutes of the time. The hours string is obtained from
+         string-array type_clock_hours below and the minutes string is obtained
+         from string-array type_clock_minutes below.
+
+    [CHAR LIMIT=8] -->
+    <plurals name="type_clock_header">
+        <item quantity="one"><annotation name="color">It\u2019s</annotation>\n^1\n^2</item>
+        <item quantity="few"><annotation name="color">It\u2019s</annotation>\n^1\n^2</item>
+        <item quantity="other"><annotation name="color">It\u2019s</annotation>\n^1\n^2</item>
+    </plurals>
+
+    <!-- Hour displayed in words on the typographic clock face. [CHAR LIMIT=12] -->
+    <string-array name="type_clock_hours">
+        <item>Twelve</item>
+        <item>One</item>
+        <item>Two</item>
+        <item>Three</item>
+        <item>Four</item>
+        <item>Five</item>
+        <item>Six</item>
+        <item>Seven</item>
+        <item>Eight</item>
+        <item>Nine</item>
+        <item>Ten</item>
+        <item>Eleven</item>
+    </string-array>
+
+    <!-- Minutes displayed in words on the typographic clock face. [CHAR LIMIT=20] -->
+    <string-array name="type_clock_minutes">
+        <item>O\u2019Clock</item>
+        <item>Oh One</item>
+        <item>Oh Two</item>
+        <item>Oh Three</item>
+        <item>Oh Four</item>
+        <item>Oh Five</item>
+        <item>Oh Six</item>
+        <item>Oh Seven</item>
+        <item>Oh Eight</item>
+        <item>Oh Nine</item>
+        <item>Ten</item>
+        <item>Eleven</item>
+        <item>Twelve</item>
+        <item>Thirteen</item>
+        <item>Fourteen</item>
+        <item>Fifteen</item>
+        <item>Sixteen</item>
+        <item>Seventeen</item>
+        <item>Eighteen</item>
+        <item>Nineteen</item>
+        <item>Twenty</item>
+        <item>Twenty\nOne</item>
+        <item>Twenty\nTwo</item>
+        <item>Twenty\nThree</item>
+        <item>Twenty\nFour</item>
+        <item>Twenty\nFive</item>
+        <item>Twenty\nSix</item>
+        <item>Twenty\nSeven</item>
+        <item>Twenty\nEight</item>
+        <item>Twenty\nNine</item>
+        <item>Thirty</item>
+        <item>Thirty\nOne</item>
+        <item>Thirty\nTwo</item>
+        <item>Thirty\nThree</item>
+        <item>Thirty\nFour</item>
+        <item>Thirty\nFive</item>
+        <item>Thirty\nSix</item>
+        <item>Thirty\nSeven</item>
+        <item>Thirty\nEight</item>
+        <item>Thirty\nNine</item>
+        <item>Forty</item>
+        <item>Forty\nOne</item>
+        <item>Forty\nTwo</item>
+        <item>Forty\nThree</item>
+        <item>Forty\nFour</item>
+        <item>Forty\nFive</item>
+        <item>Forty\nSix</item>
+        <item>Forty\nSeven</item>
+        <item>Forty\nEight</item>
+        <item>Forty\nNine</item>
+        <item>Fifty</item>
+        <item>Fifty\nOne</item>
+        <item>Fifty\nTwo</item>
+        <item>Fifty\nThree</item>
+        <item>Fifty\nFour</item>
+        <item>Fifty\nFive</item>
+        <item>Fifty\nSix</item>
+        <item>Fifty\nSeven</item>
+        <item>Fifty\nEight</item>
+        <item>Fifty\nNine</item>
+    </string-array>
+
     <!-- Name of the "Default" clock face, which is the clock face that will be shown by default. [CHAR LIMIT=15]-->
     <string name="clock_title_default">Default</string>
     <!-- Name of the "Bubble" clock face, which is an analog clock with hands shaped like large bubbles [CHAR LIMIT=15]-->
     <string name="clock_title_bubble">Bubble</string>
     <!-- Name of the "Analog" clock face [CHAR LIMIT=15]-->
     <string name="clock_title_analog">Analog</string>
+    <!-- Name of the "Typographic" clock face [CHAR LIMIT=15]-->
+    <string name="clock_title_type">Type</string>
 
 </resources>
diff --git a/packages/SystemUI/src/com/android/keyguard/clock/ClockLayout.java b/packages/SystemUI/src/com/android/keyguard/clock/ClockLayout.java
index d44d89e6..ccb495fc 100644
--- a/packages/SystemUI/src/com/android/keyguard/clock/ClockLayout.java
+++ b/packages/SystemUI/src/com/android/keyguard/clock/ClockLayout.java
@@ -37,6 +37,7 @@ public class ClockLayout extends FrameLayout {
      * Clock face views.
      */
     private View mAnalogClock;
+    private View mTypeClock;
 
     /**
      * Pixel shifting amplitudes used to prevent screen burn-in.
@@ -62,6 +63,7 @@ public class ClockLayout extends FrameLayout {
     protected void onFinishInflate() {
         super.onFinishInflate();
         mAnalogClock = findViewById(R.id.analog_clock);
+        mTypeClock = findViewById(R.id.type_clock);
 
         // Get pixel shifting X, Y amplitudes from resources.
         Resources resources = getResources();
@@ -105,5 +107,11 @@ public class ClockLayout extends FrameLayout {
             mAnalogClock.setY(Math.max(0f, 0.5f * (getHeight() - mAnalogClock.getHeight()))
                     + ANALOG_CLOCK_SHIFT_FACTOR * offsetY);
         }
+
+        // Put the typographic clock part way down the screen.
+        if (mTypeClock != null) {
+            mTypeClock.setX(offsetX);
+            mTypeClock.setY(0.2f * getHeight() + offsetY);
+        }
     }
 }
diff --git a/packages/SystemUI/src/com/android/keyguard/clock/ClockManager.java b/packages/SystemUI/src/com/android/keyguard/clock/ClockManager.java
index 1f75a268..9dcfdd48 100644
--- a/packages/SystemUI/src/com/android/keyguard/clock/ClockManager.java
+++ b/packages/SystemUI/src/com/android/keyguard/clock/ClockManager.java
@@ -152,6 +152,7 @@ public final class ClockManager {
         addBuiltinClock(() -> new DefaultClockController(res, layoutInflater, colorExtractor));
         addBuiltinClock(() -> new BubbleClockController(res, layoutInflater, colorExtractor));
         addBuiltinClock(() -> new AnalogClockController(res, layoutInflater, colorExtractor));
+        addBuiltinClock(() -> new TypeClockController(res, layoutInflater, colorExtractor));
 
         // Store the size of the display for generation of clock preview.
         DisplayMetrics dm = res.getDisplayMetrics();
diff --git a/packages/SystemUI/src/com/android/keyguard/clock/TypeClockController.java b/packages/SystemUI/src/com/android/keyguard/clock/TypeClockController.java
new file mode 100644
index 00000000..890ba1da
--- /dev/null
+++ b/packages/SystemUI/src/com/android/keyguard/clock/TypeClockController.java
@@ -0,0 +1,211 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.keyguard.clock;
+
+import android.app.WallpaperManager;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Color;
+import android.graphics.Paint.Style;
+import android.view.LayoutInflater;
+import android.view.View;
+
+import com.android.internal.colorextraction.ColorExtractor;
+import com.android.systemui.R;
+import com.android.systemui.colorextraction.SysuiColorExtractor;
+import com.android.systemui.plugins.ClockPlugin;
+
+import java.util.TimeZone;
+
+/**
+ * Plugin for a custom Typographic clock face that displays the time in words.
+ */
+public class TypeClockController implements ClockPlugin {
+
+    /**
+     * Resources used to get title and thumbnail.
+     */
+    private final Resources mResources;
+
+    /**
+     * LayoutInflater used to inflate custom clock views.
+     */
+    private final LayoutInflater mLayoutInflater;
+
+    /**
+     * Extracts accent color from wallpaper.
+     */
+    private final SysuiColorExtractor mColorExtractor;
+
+    /**
+     * Computes preferred position of clock.
+     */
+    private final SmallClockPosition mClockPosition;
+
+    /**
+     * Renders preview from clock view.
+     */
+    private final ViewPreviewer mRenderer = new ViewPreviewer();
+
+    /**
+     * Custom clock shown on AOD screen and behind stack scroller on lock.
+     */
+    private View mView;
+    private TypographicClock mTypeClock;
+
+    /**
+     * Small clock shown on lock screen above stack scroller.
+     */
+    private TypographicClock mLockClock;
+
+    /**
+     * Controller for transition into dark state.
+     */
+    private CrossFadeDarkController mDarkController;
+
+    /**
+     * Create a TypeClockController instance.
+     *
+     * @param res Resources contains title and thumbnail.
+     * @param inflater Inflater used to inflate custom clock views.
+     * @param colorExtractor Extracts accent color from wallpaper.
+     */
+    TypeClockController(Resources res, LayoutInflater inflater,
+            SysuiColorExtractor colorExtractor) {
+        mResources = res;
+        mLayoutInflater = inflater;
+        mColorExtractor = colorExtractor;
+        mClockPosition = new SmallClockPosition(res);
+    }
+
+    private void createViews() {
+        mView = mLayoutInflater.inflate(R.layout.type_aod_clock, null);
+        mTypeClock = mView.findViewById(R.id.type_clock);
+
+        // For now, this view is used to hide the default digital clock.
+        // Need better transition to lock screen.
+        mLockClock = (TypographicClock) mLayoutInflater.inflate(R.layout.typographic_clock, null);
+        mLockClock.setVisibility(View.GONE);
+
+        mDarkController = new CrossFadeDarkController(mView, mLockClock);
+    }
+
+    @Override
+    public void onDestroyView() {
+        mView = null;
+        mTypeClock = null;
+        mLockClock = null;
+        mDarkController = null;
+    }
+
+    @Override
+    public String getName() {
+        return "type";
+    }
+
+    @Override
+    public String getTitle() {
+        return mResources.getString(R.string.clock_title_type);
+    }
+
+    @Override
+    public Bitmap getThumbnail() {
+        return BitmapFactory.decodeResource(mResources, R.drawable.type_thumbnail);
+    }
+
+    @Override
+    public Bitmap getPreview(int width, int height) {
+
+        // Use the big clock view for the preview
+        View view = getBigClockView();
+
+        // Initialize state of plugin before generating preview.
+        setDarkAmount(1f);
+        setTextColor(Color.WHITE);
+        ColorExtractor.GradientColors colors = mColorExtractor.getColors(
+                WallpaperManager.FLAG_LOCK);
+        setColorPalette(colors.supportsDarkText(), colors.getColorPalette());
+        onTimeTick();
+
+        return mRenderer.createPreview(view, width, height);
+    }
+
+    @Override
+    public View getView() {
+        if (mLockClock == null) {
+            createViews();
+        }
+        return mLockClock;
+    }
+
+    @Override
+    public View getBigClockView() {
+        if (mView == null) {
+            createViews();
+        }
+        return mView;
+    }
+
+    @Override
+    public int getPreferredY(int totalHeight) {
+        return mClockPosition.getPreferredY();
+    }
+
+    @Override
+    public void setStyle(Style style) {}
+
+    @Override
+    public void setTextColor(int color) {
+        mTypeClock.setTextColor(color);
+        mLockClock.setTextColor(color);
+    }
+
+    @Override
+    public void setColorPalette(boolean supportsDarkText, int[] colorPalette) {
+        if (colorPalette == null || colorPalette.length == 0) {
+            return;
+        }
+        final int color = colorPalette[Math.max(0, colorPalette.length - 5)];
+        mTypeClock.setClockColor(color);
+        mLockClock.setClockColor(color);
+    }
+
+    @Override
+    public void onTimeTick() {
+        mTypeClock.onTimeChanged();
+        mLockClock.onTimeChanged();
+    }
+
+    @Override
+    public void setDarkAmount(float darkAmount) {
+        if (mDarkController != null) {
+            mDarkController.setDarkAmount(darkAmount);
+        }
+        mClockPosition.setDarkAmount(darkAmount);
+    }
+
+    @Override
+    public void onTimeZoneChanged(TimeZone timeZone) {
+        mTypeClock.onTimeZoneChanged(timeZone);
+        mLockClock.onTimeZoneChanged(timeZone);
+    }
+
+    @Override
+    public boolean shouldShowStatusArea() {
+        return false;
+    }
+}
diff --git a/packages/SystemUI/src/com/android/keyguard/clock/TypographicClock.java b/packages/SystemUI/src/com/android/keyguard/clock/TypographicClock.java
new file mode 100644
index 00000000..c84c5984
--- /dev/null
+++ b/packages/SystemUI/src/com/android/keyguard/clock/TypographicClock.java
@@ -0,0 +1,130 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.keyguard.clock;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.text.Annotation;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.SpannedString;
+import android.text.TextUtils;
+import android.text.format.DateFormat;
+import android.text.style.ForegroundColorSpan;
+import android.util.AttributeSet;
+import android.widget.TextView;
+
+import com.android.systemui.R;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.TimeZone;
+
+/**
+ * Clock that presents the time in words.
+ */
+public class TypographicClock extends TextView {
+
+    private static final String ANNOTATION_COLOR = "color";
+
+    private final Resources mResources;
+    private final String[] mHours;
+    private final String[] mMinutes;
+    private int mAccentColor;
+    private final Calendar mTime = Calendar.getInstance(TimeZone.getDefault());
+    private String mDescFormat;
+    private TimeZone mTimeZone;
+
+    public TypographicClock(Context context) {
+        this(context, null);
+    }
+
+    public TypographicClock(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public TypographicClock(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        mDescFormat = ((SimpleDateFormat) DateFormat.getTimeFormat(context)).toLocalizedPattern();
+        mResources = context.getResources();
+        mHours = mResources.getStringArray(R.array.type_clock_hours);
+        mMinutes = mResources.getStringArray(R.array.type_clock_minutes);
+        mAccentColor = mResources.getColor(R.color.typeClockAccentColor, null);
+    }
+
+    /**
+     * Call when the time changes to update the text of the time.
+     */
+    public void onTimeChanged() {
+        mTime.setTimeInMillis(System.currentTimeMillis());
+        setContentDescription(DateFormat.format(mDescFormat, mTime));
+        final int hour = mTime.get(Calendar.HOUR) % 12;
+        final int minute = mTime.get(Calendar.MINUTE) % 60;
+
+        // Get the quantity based on the hour for languages like Portuguese and Czech.
+        SpannedString typeTemplate = (SpannedString) mResources.getQuantityText(
+                R.plurals.type_clock_header, hour);
+
+        // Find the "color" annotation and set the foreground color to the accent color.
+        Annotation[] annotations = typeTemplate.getSpans(0, typeTemplate.length(),
+                Annotation.class);
+        SpannableString spanType = new SpannableString(typeTemplate);
+        for (int i = 0; i < annotations.length; i++) {
+            Annotation annotation = annotations[i];
+            String key = annotation.getValue();
+            if (ANNOTATION_COLOR.equals(key)) {
+                spanType.setSpan(new ForegroundColorSpan(mAccentColor),
+                        spanType.getSpanStart(annotation), spanType.getSpanEnd(annotation),
+                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+            }
+        }
+
+        setText(TextUtils.expandTemplate(spanType, mHours[hour], mMinutes[minute]));
+    }
+
+    /**
+     * Call when the time zone has changed to update clock time.
+     *
+     * @param timeZone The updated time zone that will be used.
+     */
+    public void onTimeZoneChanged(TimeZone timeZone) {
+        mTimeZone = timeZone;
+        mTime.setTimeZone(timeZone);
+    }
+
+    /**
+     * Sets the accent color used on the clock face.
+     */
+    public void setClockColor(int color) {
+        mAccentColor = color;
+        onTimeChanged();
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        mTime.setTimeZone(mTimeZone != null ? mTimeZone : TimeZone.getDefault());
+        onTimeChanged();
+    }
+
+    /**
+     * Overriding hasOverlappingRendering as false to improve performance of crossfading.
+     */
+    @Override
+    public boolean hasOverlappingRendering() {
+        return false;
+    }
+}
-- 
2.30.1

