From 0f55d2af12c962112ea8bfd0d211814d1052aaff Mon Sep 17 00:00:00 2001
From: ghbhaha <ghbhaha@gmail.com>
Date: Sun, 9 Aug 2015 01:23:33 +0800
Subject: [PATCH 10/34] base: Add three-fingers-swipe to screenshot [1/2]

The feature is ported from Oppo ColorOS.
With the options on, users can swipe down
on the screen to have a screenshot.

original smali port by: wuxianlin

Change-Id: I395dcd799b86531c9f725aa8430d8ea2a2272f02
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
Signed-off-by: Sujit Roy <kumarsujitroy@gmail.com>
---
 core/java/android/provider/Settings.java      |   6 +
 .../server/policy/OPGesturesListener.java     | 154 ++++++++++++++++++
 .../server/policy/PhoneWindowManager.java     |  30 +++-
 3 files changed, 189 insertions(+), 1 deletion(-)
 create mode 100644 services/core/java/com/android/server/policy/OPGesturesListener.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 190db1b1..50c48bd9 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4473,6 +4473,12 @@ public final class Settings {
           */
         public static final String VOLUME_KEY_CURSOR_CONTROL = "volume_key_cursor_control";
 
+        /**
+         * Three Finger Gesture from Oppo
+         * @hide
+         */
+        public static final String THREE_FINGER_GESTURE = "three_finger_gesture";
+
         /**
          * Control the type of rotation which can be performed using the accelerometer
          * if ACCELEROMETER_ROTATION is enabled.
diff --git a/services/core/java/com/android/server/policy/OPGesturesListener.java b/services/core/java/com/android/server/policy/OPGesturesListener.java
new file mode 100644
index 00000000..e4af1a03
--- /dev/null
+++ b/services/core/java/com/android/server/policy/OPGesturesListener.java
@@ -0,0 +1,154 @@
+/*
+ * Copyright (C) 2015 The Euphoria-OS Project
+ * Copyright (C) 2015 The SudaMod Project
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.policy;
+
+import android.content.Context;
+import android.util.Slog;
+import android.view.MotionEvent;
+import android.view.WindowManagerPolicyConstants.PointerEventListener;
+
+public class OPGesturesListener implements PointerEventListener {
+    private static final String TAG = "OPGestures";
+    private static final boolean DEBUG = false;
+    private static final int NUM_POINTER_SCREENSHOT = 3;
+    private static final long SWIPE_TIMEOUT_MS = 500;
+    private static final int MAX_TRACKED_POINTERS = 32;
+    private static final int UNTRACKED_POINTER = -1;
+    private static final int THREE_SWIPE_DISTANCE = 350;
+    private final int GESTURE_THREE_SWIPE_MASK = 15;
+    private final int POINTER_1_MASK = 2;
+    private final int POINTER_2_MASK = 4;
+    private final int POINTER_3_MASK = 8;
+    private final int POINTER_NONE_MASK = 1;
+    private final Callbacks mCallbacks;
+    private final int[] mDownPointerId = new int[MAX_TRACKED_POINTERS];
+    private final float[] mDownX = new float[MAX_TRACKED_POINTERS];
+    private final float[] mDownY = new float[MAX_TRACKED_POINTERS];
+    private final long[] mDownTime = new long[MAX_TRACKED_POINTERS];
+    private int mDownPointers;
+    private boolean mSwipeFireable = false;
+    private int mSwipeMask = 1;
+
+    public OPGesturesListener(Context paramContext, Callbacks callbacks) {
+        mCallbacks = checkNull("callbacks", callbacks);
+    }
+
+    private static <T> T checkNull(String name, T arg) {
+        if (arg == null) {
+            throw new IllegalArgumentException(name + " must not be null");
+        }
+        return arg;
+    }
+
+    @Override
+    public void onPointerEvent(MotionEvent event) {
+        switch (event.getActionMasked()) {
+            case MotionEvent.ACTION_DOWN:
+                mSwipeFireable = true;
+                mDownPointers = 0;
+                captureDown(event, 0);
+                break;
+            case MotionEvent.ACTION_POINTER_DOWN:
+                captureDown(event, event.getActionIndex());
+                break;
+            case MotionEvent.ACTION_MOVE:
+                if (DEBUG) Slog.d(TAG, "count3" + event.getPointerCount());
+                if (mSwipeFireable) {
+                    detectSwipe(event);
+                }
+                break;
+            case MotionEvent.ACTION_UP:
+                if (mSwipeMask == GESTURE_THREE_SWIPE_MASK) {
+                    mSwipeMask = 1;
+                    mCallbacks.onSwipeThreeFinger();
+                }
+                break;
+            case MotionEvent.ACTION_CANCEL:
+                mSwipeFireable = false;
+                break;
+            case MotionEvent.ACTION_POINTER_UP:
+                break;
+            default:
+                if (DEBUG) Slog.d(TAG, "Ignoring " + event);
+        }
+    }
+
+    private void captureDown(MotionEvent event, int pointerIndex) {
+        final int pointerId = event.getPointerId(pointerIndex);
+        final int i = findIndex(pointerId);
+        final int pointerCount  = event.getPointerCount();
+        if (DEBUG) Slog.d(TAG, "pointer " + pointerId +
+                " down pointerIndex=" + pointerIndex + " trackingIndex=" + i);
+        if (i != UNTRACKED_POINTER) {
+            mDownX[i] = event.getX(pointerIndex);
+            mDownY[i] = event.getY(pointerIndex);
+            mDownTime[i] = event.getEventTime();
+            if (DEBUG) Slog.d(TAG, "pointer " + pointerId +
+                    " down x=" + mDownX[i] + " y=" + mDownY[i]);
+        }
+        if (pointerCount == NUM_POINTER_SCREENSHOT) {
+            mSwipeFireable = true;
+            return;
+        }
+        mSwipeFireable = false;
+    }
+
+    private int findIndex(int pointerId) {
+        for (int i = 0; i < mDownPointers; i++) {
+            if (mDownPointerId[i] == pointerId) {
+                return i;
+            }
+        }
+        if (mDownPointers == MAX_TRACKED_POINTERS || pointerId == MotionEvent.INVALID_POINTER_ID) {
+            return UNTRACKED_POINTER;
+        }
+        mDownPointerId[mDownPointers++] = pointerId;
+        return mDownPointers - 1;
+    }
+
+    private void detectSwipe(MotionEvent move) {
+        move.getHistorySize();
+        final int pointerCount = move.getPointerCount();
+        for (int p = 0; p < pointerCount; p++) {
+            final int pointerId = move.getPointerId(p);
+            final int i = findIndex(pointerId);
+            if (i != UNTRACKED_POINTER) {
+                detectSwipe(i, move.getEventTime(), move.getX(p), move.getY(p));
+            }
+        }
+    }
+
+    private void detectSwipe(int i, long time, float x, float y) {
+        final float fromX = mDownX[i];
+        final float fromY = mDownY[i];
+        final long elapsed = time - mDownTime[i];
+        if (DEBUG) Slog.d(TAG, "pointer " + mDownPointerId[i]
+                + " moved (" + fromX + "->" + x + "," + fromY + "->" + y + ") in " + elapsed);
+        if (mSwipeMask < GESTURE_THREE_SWIPE_MASK
+                && y > fromY + THREE_SWIPE_DISTANCE
+                && elapsed < SWIPE_TIMEOUT_MS) {
+            mSwipeMask |= 1 << i + 1;
+            if (DEBUG) Slog.d(TAG, "swipe mask = " + mSwipeMask);
+        }
+    }
+
+    interface Callbacks {
+        void onSwipeThreeFinger();
+    }
+}
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 2689703d..de72d5e1 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -655,6 +655,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     boolean mHavePendingMediaKeyRepeatWithWakeLock;
 
     private int mCurrentUserId;
+    private boolean haveEnableGesture = false;
 
     // Maps global key codes to the components that will handle them.
     private GlobalKeyManager mGlobalKeyManager;
@@ -720,6 +721,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
     private LineageHardwareManager mLineageHardware;
 
+    private OPGesturesListener mOPGestures;
     private class PolicyHandler extends Handler {
         @Override
         public void handleMessage(Message msg) {
@@ -932,7 +934,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             resolver.registerContentObserver(LineageSettings.System.getUriFor(
                     LineageSettings.System.CLICK_PARTIAL_SCREENSHOT), false, this,
                     UserHandle.USER_ALL);
-
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.THREE_FINGER_GESTURE), false, this,
+                    UserHandle.USER_ALL);
             updateSettings();
         }
 
@@ -2049,6 +2053,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
 
         mHandler = new PolicyHandler();
+        mOPGestures = new OPGesturesListener(context, new OPGesturesListener.Callbacks() {
+            @Override
+            public void onSwipeThreeFinger() {
+                mHandler.post(mScreenshotRunnable);
+            }
+        });
         mWakeGestureListener = new MyWakeGestureListener(mContext, mHandler);
         mSettingsObserver = new SettingsObserver(mHandler);
 
@@ -2206,6 +2216,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             finishedGoingToSleep(WindowManagerPolicy.OFF_BECAUSE_OF_USER);
         }
 
+
         mWindowManagerInternal.registerAppTransitionListener(new AppTransitionListener() {
             @Override
             public int onAppTransitionStartingLocked(int transit, long duration,
@@ -2272,6 +2283,18 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         context.registerReceiver(torchReceiver, filter);
     }
 
+     private void enableSwipeThreeFingerGesture(boolean enable){
+        if (enable) {
+            if (haveEnableGesture) return;
+            haveEnableGesture = true;
+            mWindowManagerFuncs.registerPointerEventListener(mOPGestures, DEFAULT_DISPLAY);
+        } else {
+            if (!haveEnableGesture) return;
+            haveEnableGesture = false;
+            mWindowManagerFuncs.unregisterPointerEventListener(mOPGestures, DEFAULT_DISPLAY);
+        }
+    }
+
     private void updateKeyAssignments() {
         int activeHardwareKeys = mDeviceHardwareKeys;
 
@@ -2435,6 +2458,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     LineageSettings.System.CLICK_PARTIAL_SCREENSHOT, 0,
                     UserHandle.USER_CURRENT) == 1;
 
+            //Three Finger Gesture
+            boolean threeFingerGesture = Settings.System.getIntForUser(resolver,
+                    Settings.System.THREE_FINGER_GESTURE, 0, UserHandle.USER_CURRENT) == 1;
+            enableSwipeThreeFingerGesture(threeFingerGesture);
+
             // Configure wake gesture.
             boolean wakeGestureEnabledSetting = Settings.Secure.getIntForUser(resolver,
                     Settings.Secure.WAKE_GESTURE_ENABLED, 0,
-- 
2.30.1

