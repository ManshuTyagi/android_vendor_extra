From 1e4cf6cc30f157f344773975d4887fa93ddb9414 Mon Sep 17 00:00:00 2001
From: Henrique Silva <jhenrique09.mcz@hotmail.com>
Date: Wed, 8 May 2019 11:52:38 -0300
Subject: [PATCH 12/34] base: SwipeToScreenshot: Import MIUI implementation

Reverse engineered from Xiaomi/beryllium/beryllium:9/PKQ1.180729.001/9.2.25:user/release-keys

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../server/am/ActivityManagerService.java     |   2 +-
 .../server/policy/OPGesturesListener.java     | 154 ------------------
 .../server/policy/PhoneWindowManager.java     |   9 +-
 .../policy/SwipeToScreenshotListener.java     | 148 +++++++++++++++++
 4 files changed, 154 insertions(+), 159 deletions(-)
 delete mode 100644 services/core/java/com/android/server/policy/OPGesturesListener.java
 create mode 100644 services/core/java/com/android/server/policy/SwipeToScreenshotListener.java

diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index 8c7ef623..7292fe76 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -20411,7 +20411,7 @@ public class ActivityManagerService extends IActivityManager.Stub
     @Override
     public boolean isSwipeToScreenshotGestureActive() {
         synchronized (this) {
-            return mIsSwipeToScrenshotEnabled;
+            return mIsSwipeToScrenshotEnabled && SystemProperties.getBoolean("sys.android.screenshot", false);
         }
     }
 }
diff --git a/services/core/java/com/android/server/policy/OPGesturesListener.java b/services/core/java/com/android/server/policy/OPGesturesListener.java
deleted file mode 100644
index e4af1a03..00000000
--- a/services/core/java/com/android/server/policy/OPGesturesListener.java
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- * Copyright (C) 2015 The Euphoria-OS Project
- * Copyright (C) 2015 The SudaMod Project
- * Copyright (C) 2013 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.server.policy;
-
-import android.content.Context;
-import android.util.Slog;
-import android.view.MotionEvent;
-import android.view.WindowManagerPolicyConstants.PointerEventListener;
-
-public class OPGesturesListener implements PointerEventListener {
-    private static final String TAG = "OPGestures";
-    private static final boolean DEBUG = false;
-    private static final int NUM_POINTER_SCREENSHOT = 3;
-    private static final long SWIPE_TIMEOUT_MS = 500;
-    private static final int MAX_TRACKED_POINTERS = 32;
-    private static final int UNTRACKED_POINTER = -1;
-    private static final int THREE_SWIPE_DISTANCE = 350;
-    private final int GESTURE_THREE_SWIPE_MASK = 15;
-    private final int POINTER_1_MASK = 2;
-    private final int POINTER_2_MASK = 4;
-    private final int POINTER_3_MASK = 8;
-    private final int POINTER_NONE_MASK = 1;
-    private final Callbacks mCallbacks;
-    private final int[] mDownPointerId = new int[MAX_TRACKED_POINTERS];
-    private final float[] mDownX = new float[MAX_TRACKED_POINTERS];
-    private final float[] mDownY = new float[MAX_TRACKED_POINTERS];
-    private final long[] mDownTime = new long[MAX_TRACKED_POINTERS];
-    private int mDownPointers;
-    private boolean mSwipeFireable = false;
-    private int mSwipeMask = 1;
-
-    public OPGesturesListener(Context paramContext, Callbacks callbacks) {
-        mCallbacks = checkNull("callbacks", callbacks);
-    }
-
-    private static <T> T checkNull(String name, T arg) {
-        if (arg == null) {
-            throw new IllegalArgumentException(name + " must not be null");
-        }
-        return arg;
-    }
-
-    @Override
-    public void onPointerEvent(MotionEvent event) {
-        switch (event.getActionMasked()) {
-            case MotionEvent.ACTION_DOWN:
-                mSwipeFireable = true;
-                mDownPointers = 0;
-                captureDown(event, 0);
-                break;
-            case MotionEvent.ACTION_POINTER_DOWN:
-                captureDown(event, event.getActionIndex());
-                break;
-            case MotionEvent.ACTION_MOVE:
-                if (DEBUG) Slog.d(TAG, "count3" + event.getPointerCount());
-                if (mSwipeFireable) {
-                    detectSwipe(event);
-                }
-                break;
-            case MotionEvent.ACTION_UP:
-                if (mSwipeMask == GESTURE_THREE_SWIPE_MASK) {
-                    mSwipeMask = 1;
-                    mCallbacks.onSwipeThreeFinger();
-                }
-                break;
-            case MotionEvent.ACTION_CANCEL:
-                mSwipeFireable = false;
-                break;
-            case MotionEvent.ACTION_POINTER_UP:
-                break;
-            default:
-                if (DEBUG) Slog.d(TAG, "Ignoring " + event);
-        }
-    }
-
-    private void captureDown(MotionEvent event, int pointerIndex) {
-        final int pointerId = event.getPointerId(pointerIndex);
-        final int i = findIndex(pointerId);
-        final int pointerCount  = event.getPointerCount();
-        if (DEBUG) Slog.d(TAG, "pointer " + pointerId +
-                " down pointerIndex=" + pointerIndex + " trackingIndex=" + i);
-        if (i != UNTRACKED_POINTER) {
-            mDownX[i] = event.getX(pointerIndex);
-            mDownY[i] = event.getY(pointerIndex);
-            mDownTime[i] = event.getEventTime();
-            if (DEBUG) Slog.d(TAG, "pointer " + pointerId +
-                    " down x=" + mDownX[i] + " y=" + mDownY[i]);
-        }
-        if (pointerCount == NUM_POINTER_SCREENSHOT) {
-            mSwipeFireable = true;
-            return;
-        }
-        mSwipeFireable = false;
-    }
-
-    private int findIndex(int pointerId) {
-        for (int i = 0; i < mDownPointers; i++) {
-            if (mDownPointerId[i] == pointerId) {
-                return i;
-            }
-        }
-        if (mDownPointers == MAX_TRACKED_POINTERS || pointerId == MotionEvent.INVALID_POINTER_ID) {
-            return UNTRACKED_POINTER;
-        }
-        mDownPointerId[mDownPointers++] = pointerId;
-        return mDownPointers - 1;
-    }
-
-    private void detectSwipe(MotionEvent move) {
-        move.getHistorySize();
-        final int pointerCount = move.getPointerCount();
-        for (int p = 0; p < pointerCount; p++) {
-            final int pointerId = move.getPointerId(p);
-            final int i = findIndex(pointerId);
-            if (i != UNTRACKED_POINTER) {
-                detectSwipe(i, move.getEventTime(), move.getX(p), move.getY(p));
-            }
-        }
-    }
-
-    private void detectSwipe(int i, long time, float x, float y) {
-        final float fromX = mDownX[i];
-        final float fromY = mDownY[i];
-        final long elapsed = time - mDownTime[i];
-        if (DEBUG) Slog.d(TAG, "pointer " + mDownPointerId[i]
-                + " moved (" + fromX + "->" + x + "," + fromY + "->" + y + ") in " + elapsed);
-        if (mSwipeMask < GESTURE_THREE_SWIPE_MASK
-                && y > fromY + THREE_SWIPE_DISTANCE
-                && elapsed < SWIPE_TIMEOUT_MS) {
-            mSwipeMask |= 1 << i + 1;
-            if (DEBUG) Slog.d(TAG, "swipe mask = " + mSwipeMask);
-        }
-    }
-
-    interface Callbacks {
-        void onSwipeThreeFinger();
-    }
-}
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index de72d5e1..8162cb20 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -721,7 +721,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
     private LineageHardwareManager mLineageHardware;
 
-    private OPGesturesListener mOPGestures;
+    private SwipeToScreenshotListener mSwipeToScreenshot;
+
     private class PolicyHandler extends Handler {
         @Override
         public void handleMessage(Message msg) {
@@ -2053,7 +2054,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
 
         mHandler = new PolicyHandler();
-        mOPGestures = new OPGesturesListener(context, new OPGesturesListener.Callbacks() {
+        mSwipeToScreenshot = new SwipeToScreenshotListener(context, new SwipeToScreenshotListener.Callbacks() {
             @Override
             public void onSwipeThreeFinger() {
                 mHandler.post(mScreenshotRunnable);
@@ -2287,11 +2288,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         if (enable) {
             if (haveEnableGesture) return;
             haveEnableGesture = true;
-            mWindowManagerFuncs.registerPointerEventListener(mOPGestures, DEFAULT_DISPLAY);
+            mWindowManagerFuncs.registerPointerEventListener(mSwipeToScreenshot, DEFAULT_DISPLAY);
         } else {
             if (!haveEnableGesture) return;
             haveEnableGesture = false;
-            mWindowManagerFuncs.unregisterPointerEventListener(mOPGestures, DEFAULT_DISPLAY);
+            mWindowManagerFuncs.unregisterPointerEventListener(mSwipeToScreenshot, DEFAULT_DISPLAY);
         }
     }
 
diff --git a/services/core/java/com/android/server/policy/SwipeToScreenshotListener.java b/services/core/java/com/android/server/policy/SwipeToScreenshotListener.java
new file mode 100644
index 00000000..88a465b6
--- /dev/null
+++ b/services/core/java/com/android/server/policy/SwipeToScreenshotListener.java
@@ -0,0 +1,148 @@
+/*
+ * Copyright (C) 2019 The PixelExperience Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.policy;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.provider.Settings;
+import android.util.Log;
+import android.util.DisplayMetrics;
+import android.view.MotionEvent;
+import android.view.WindowManagerPolicyConstants.PointerEventListener;
+
+public class SwipeToScreenshotListener implements PointerEventListener {
+    private static final String TAG = "SwipeToScreenshotListener";
+    private static final int THREE_GESTURE_STATE_NONE = 0;
+    private static final int THREE_GESTURE_STATE_DETECTING = 1;
+    private static final int THREE_GESTURE_STATE_DETECTED_FALSE = 2;
+    private static final int THREE_GESTURE_STATE_DETECTED_TRUE = 3;
+    private static final int THREE_GESTURE_STATE_NO_DETECT = 4;
+    private boolean mBootCompleted;
+    private Context mContext;
+    private boolean mDeviceProvisioned = false;
+    private float[] mInitMotionY;
+    private int[] mPointerIds;
+    private int mThreeGestureState = THREE_GESTURE_STATE_NONE;
+    private int mThreeGestureThreshold;
+    private int mThreshold;
+    private final Callbacks mCallbacks;
+    DisplayMetrics mDisplayMetrics;
+
+    public SwipeToScreenshotListener(Context context, Callbacks callbacks) {
+        mPointerIds = new int[3];
+        mInitMotionY = new float[3];
+        mContext = context;
+        mCallbacks = callbacks;
+        mDisplayMetrics = mContext.getResources().getDisplayMetrics();
+        mThreshold = (int) (50.0f * mDisplayMetrics.density);
+        mThreeGestureThreshold = mThreshold * 3;
+    }
+
+    @Override
+    public void onPointerEvent(MotionEvent event) {
+        if (!mBootCompleted) {
+            mBootCompleted = SystemProperties.getBoolean("sys.boot_completed", false);
+            return;
+        }
+        if (!mDeviceProvisioned) {
+            mDeviceProvisioned = Settings.Global.getInt(mContext.getContentResolver(),
+                Settings.Global.DEVICE_PROVISIONED, 0) != 0;
+            return;
+        }
+        if (event.getAction() == 0) {
+            changeThreeGestureState(THREE_GESTURE_STATE_NONE);
+        } else if (mThreeGestureState == THREE_GESTURE_STATE_NONE && event.getPointerCount() == 3) {
+            if (checkIsStartThreeGesture(event)) {
+                changeThreeGestureState(THREE_GESTURE_STATE_DETECTING);
+                for (int i = 0; i < 3; i++) {
+                    mPointerIds[i] = event.getPointerId(i);
+                    mInitMotionY[i] = event.getY(i);
+                }
+            } else {
+                changeThreeGestureState(THREE_GESTURE_STATE_NO_DETECT);
+            }
+        }
+        if (mThreeGestureState == THREE_GESTURE_STATE_DETECTING) {
+            if (event.getPointerCount() != 3) {
+                changeThreeGestureState(THREE_GESTURE_STATE_DETECTED_FALSE);
+                return;
+            }
+            if (event.getActionMasked() == MotionEvent.ACTION_MOVE) {
+                float distance = 0.0f;
+                int i = 0;
+                while (i < 3) {
+                    int index = event.findPointerIndex(mPointerIds[i]);
+                    if (index < 0 || index >= 3) {
+                        changeThreeGestureState(THREE_GESTURE_STATE_DETECTED_FALSE);
+                        return;
+                    } else {
+                        distance += event.getY(index) - mInitMotionY[i];
+                        i++;
+                    }
+                }
+                if (distance >= ((float) mThreeGestureThreshold)) {
+                    changeThreeGestureState(THREE_GESTURE_STATE_DETECTED_TRUE);
+                    mCallbacks.onSwipeThreeFinger();
+                }
+            }
+        }
+    }
+
+    private void changeThreeGestureState(int state) {
+        if (mThreeGestureState != state){
+            mThreeGestureState = state;
+            boolean shouldEnableProp = mThreeGestureState == THREE_GESTURE_STATE_DETECTED_TRUE ||
+                mThreeGestureState == THREE_GESTURE_STATE_DETECTING;
+            try {
+                SystemProperties.set("sys.android.screenshot", shouldEnableProp ? "true" : "false");
+            } catch(Exception e) {
+                Log.e(TAG, "Exception when setprop", e);
+            }
+        }
+    }
+
+    private boolean checkIsStartThreeGesture(MotionEvent event) {
+        if (event.getEventTime() - event.getDownTime() > 500) {
+            return false;
+        }
+        int height = mDisplayMetrics.heightPixels;
+        int width = mDisplayMetrics.widthPixels;
+        float minX = Float.MAX_VALUE;
+        float maxX = Float.MIN_VALUE;
+        float minY = Float.MAX_VALUE;
+        float maxY = Float.MIN_VALUE;
+        for (int i = 0; i < event.getPointerCount(); i++) {
+            float x = event.getX(i);
+            float y = event.getY(i);
+            if (y > ((float) (height - mThreshold))) {
+                return false;
+            }
+            maxX = Math.max(maxX, x);
+            minX = Math.min(minX, x);
+            maxY = Math.max(maxY, y);
+            minY = Math.min(minY, y);
+        }
+        if (maxY - minY <= mDisplayMetrics.density * 150.0f) {
+            return maxX - minX <= ((float) (width < height ? width : height));
+        }
+        return false;
+    }
+
+    interface Callbacks {
+        void onSwipeThreeFinger();
+    }
+}
-- 
2.30.1

